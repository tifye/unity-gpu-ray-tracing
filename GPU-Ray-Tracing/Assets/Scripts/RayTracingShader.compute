// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Sphere {
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

// Create a RenderTexture with enableRandomWrite flag and set it with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture; // TODO: What is this
static const float PI = 3.1415926535897932384626433832795f;
float2 _PixelOffset;
float4 _DirectionalLight;
StructuredBuffer<Sphere> _Spheres;



RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    // Calculate distance along the ray where the ground plane is intersected
    // Calculate intersection by using origin and direction
    // Get distance between origin and intersection
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance) {
        // Update the best hit
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = float3(0.01f, 0.01f, 0.01f);
        bestHit.specular = float3(0.2f, 0.2f, 0.2f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {
    // https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d); // Genius
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius; // Check if even intersects at all
    if (p2sqr < 0) {
        return;
    }
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2; // IF entry point of the sphere is valid choose that, else choose the exit point
    if (t > 0 && t < bestHit.distance) {
        // Update the best hit
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }

}

RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++) {
        IntersectSphere(ray, bestHit, _Spheres[i]);
    }

    return bestHit;
}

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

float3 Shade(inout Ray ray, RayHit hit) {
    if (hit.distance < 1.#INF) {
        float3 specular = hit.specular;
        float3 albedo = hit.albedo;

        // Refkect the ray and multiply energy with speculat reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;

        // Shadow test ray
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 1.#INF) {
            // Return nothing if shadow is detected
            return float3(0.0f, 0.0f, 0.0f);
        }

        // Return a diffuse-shaded color
        // hit.normal and _DirectionalLight are both normalized
        // so the dot product == the cosine of the angle between them
        // hit.normal and _DirectionalLight are facing in opposite directions
        // so the dot product returns negative, make up for this by multiplying by -1
        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * albedo;
    } else {
        // Erase the ray's energy, the sky does not reflect anything
        ray.energy = 0.0f;

        // If didn't hit anything, fallback to sampling the skybox
        float theta = acos(ray.direction.y) -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 2.0f;
    }
}



Ray CreateCameraRay(float2 uv) {
    // Transform from camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1, 1] range
    float2 uv = float2(id.xy + _PixelOffset) / float2(width, height);

    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    // Trace and shade
    float3 result = float3(0.0f, 0.0f, 0.0f);
    for (int i = 0; i < 8; i++) {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy)) break;
    }
    Result[id.xy] = float4(result, 1);
}
